#!/usr/bin/perl -w
#
# greprange: Extract text starting at each line with a hit,
# and continuing until some other kind of hit.
# 2008-02-01: Written by Steven J. DeRose.
#
use strict;
use Getopt::Long;

our %metadata = (
    'title'        => "greprange",
    'description'  => "Extract text from starting to endine matches.",
    'rightsHolder' => "Steven J. DeRose",
    'creator'      => "http://viaf.org/viaf/50334488",
    'type'         => "http://purl.org/dc/dcmitype/Software",
    'language'     => "Perl 5.18",
    'created'      => "2008-02-01",
    'modified'     => "2021-04-11",
    'publisher'    => "http://github.com/sderose",
    'license'      => "https://creativecommons.org/licenses/by-sa/3.0/"
);
our $VERSION_DATE = $metadata{'modified'};


=pod

=head1 Usage

greprange [options] [files]

Extract ranges of lines from a file(s), where the range starts and ends
are indicated by (Perl) regular expressions.

For example:

    greprange --start '<abstract>' --end '</abstract>'

would pull out all the lines tagged as an XML 'abstract' element(s).

The regexes do not have to exhause the lines they match on; if you want that,
give them as ^...$.


=head1 Options

(most are like for C<grep>):

=over

=item * B<--countOnly>

Just count hits, don't display them.

=item * B<--end> I<expr>

Expression to end at.

=item * B<--headings>

Prefix filename(s) to matched lines.

=item * B<-i>

Ignore case.

=item * B<--includeEnd>

Include the matching end line itself.

=item * B<--invert-match> (or -v)

Print lines *outside* of matched ranges.

=item * B<--includeStart>

Include the matching start line itself.

=item * B<--label> I<l>

Display I<l> as the 'filename' for hits on STDIN.

=item * B<--line-number> (or -n)

Prefix displayed lines with line numbers.

=item * B<--maxRanges> I<n>

Stop after I<n> matching ranges have been found.

=item * B<--sep> I<s>

Print this after each matched range. Default: none ("").

=item * B<--start> I<expr>

Expression to start at.

=item * B<--max> I<n>

Only find this many ranges.

=item * B<--only-matching> or B<-o>

Include only the inward part of the start/end lines.

=item * B<-q> or B<--quiet>

Suppress most messages.

=item * B<-s>

Suppress messages about missing files.

=item * B<--verbose>

Add more detailed messages.

=item * B<--version>

Display version info and exit.

=back


=head1 Related commands

You can do this with a bit of C<awk> if you remember how.
See L<https://stackoverflow.com/questions/38972736>.
For example:
    awk '/PAT1/{flag=1} flag; /PAT2/{flag=0}' myFile

My C<grepData> and C<body --iterate> scripts do related extractions.


=head1 Known bugs and limitations

I<-h> and I<-o> are not finished.

There are no C<grep>-like options for:
    context: I<-A> I<-B> I<-C>;
    regex types: I<-E> I<-e> I<-F> I<-G> I<-w> I<-x>;
    unusual file options: I<-a> I<-d> I<-D> I<-I> I<-U>;
    other: I<-f> I<-l> I<-L> I<-r> and I<-z>.


=head1 History

    2008-02-01: Written by Steven J. DeRose.
    2008-02-11 sjd: Add -c, -i, --includeEnd, --includeStart, -n, -v(invert-match).
Start multi-file support, -h -H -o.
    2015-08-20: Clean up.
    2020-08-31: New layout.
    2021-04-11: Fix file handling. Implement --only-matching. Show awk alternative.
    2021-09-10: Rename --istart and --iend to --includeStart and --includeEnd.
Add --fpat and --lpat as synonyms for --start and --end (to match `body` script).
Fix several major logic bugs, clean up code.  Add --sep.


=head1 To do

    Add --maxLines to make sure first and last lines are close enough.
    Integrate into C<body> or C<grepData>.
    -b (byte-offset), -u (unix-byte-offsets) (strips CR).
    Port to Pythong and integrate PowerWalk.

=head1 Rights

Copyright 2008-02-01 by Steven J. DeRose. This work is licensed under a
Creative Commons Attribution-Share Alike 3.0 Unported License.
For further information on this license, see
L<https://creativecommons.org/licenses/by-sa/3.0>.

For the most recent version, see L<http://www.derose.net/steve/utilities> or
L<https://github.com/sderose>.


=cut


###############################################################################
# Options
#
my $countOnly        = 0;
my $includeEnd       = 0;
my $ignoreCase       = 0;
my $invert           = 0;
my $includeStart     = 0;
my $label            = "";
my $lineNumber       = 0;
my $maxRanges        = 0;
my $maxLinesPerRange = 0;
my $onlyMatching     = 0;
my $quiet            = 0;
my $sep              = "";
my $start            = "";
my $suppress         = 0;
my $end              = "";
my $verbose          = 0;
my $withFilename     = 0;

Getopt::Long::Configure ("ignore_case");
my $result = GetOptions(
    "countOnly!"          => \$countOnly,
    "end|lpat=s"          => \$end,
    "h|help|?"            => sub { system "perldoc $0"; exit; },
    "with-filename!"      => \$withFilename,
    "no-filename"         => sub { $withFilename = 0; },
    "i|ignore-case!"      => \$ignoreCase,
    "includeEnd!"         => \$includeEnd,
    "includeStart!"       => \$includeStart,
    "label=s"             => \$label,
    "n|line-number!"      => \$lineNumber,
    "maxLinesPerRange=i"  => \$maxLinesPerRange,
    "maxRanges=i"         => \$maxRanges,
    "o|only-matching!"    => \$onlyMatching,
    "q|quiet!"            => \$quiet,
    "sep=s"               => \$sep,
    "start|fpat=s"        => \$start,
    "suppress!"           => \$suppress,
    "verbose+"            => \$verbose,
    "v|invert-match!"     => \$invert,
    "version"             => sub {
        die "Version of $VERSION_DATE, by Steven J. DeRose.\n";
    },
    "y"                   => sub { $ignoreCase = 1; }
);

($result) || die "Bad options.\n";

# Validate and default options
#
($start) || ($end) ||
    die "Must specify at least --start or --end expression.\n";


###############################################################################
# Main
#
my $nFiles = 0;
my $totLines = 0;
my $totFound = 0;
while (my $file = shift) {
    if (!-f $file) {
        warn "Couldn't find file '$file'.\n";
        next;
    }
    ($verbose) && warn "Starting file '$file'.\n";
    $nFiles++;
    $totFound += doOneFile($file);
}
($quiet) || warn
    "Done, $nFiles files, $totLines records searched. $totFound range matches.\n";
exit;


###############################################################################
#
sub doOneFile {
    my ($path) = @_;
    my $fh;
    if ($path eq "-") {
        $fh = *STDIN;
    }
    elsif (-f $path) {
        open($fh, "<", "$path");
    }
    else {
        ($suppress) || warn "Could not find file '$path'.\n";
        return 0;
    }

    ($quiet) || warn("********************* Starting file $path\n");
    my $lnum = 0;
    my $matchesStart = 0;
    my $matchesEnd = 0;
    my $inRange = 0;
    my @pendingLines = ();
    my $nFound = 0;
    while (my $rec = <$fh>) {
        $lnum++;
        $totLines++;
        $matchesStart = matches($rec, $start);
        $matchesEnd = matches($rec, $end);
        
        if ($maxLinesPerRange and scalar @pendingLines > $maxLinesPerRange) {  # Too far, cancel
            $inRange = 0;
            @pendingLines = ();
        }
        if (!$inRange) {                                        # Seeking range-start
            if ($matchesStart) {
                 $inRange = 1;
                 if ($includeStart) {
                     push(@pendingLines, ($lineNumber ? "$lnum:":"") . $rec);
                 }
                 elsif ($onlyMatching) {
                    $rec =~ s/.*$start//;
                    push(@pendingLines,  $rec);
                 }
            }
        }
        else {                                                  # In range, seeking end
            if ($matchesEnd) {
                if ($includeEnd) {
                    push(@pendingLines, ($lineNumber ? "$lnum:":"") . $rec);
                }
                elsif ($onlyMatching) {
                    $rec =~ s/$end.*//;
                    push(@pendingLines, $rec);
                }
                $nFound += 1;
                if (!$countOnly) { print join("", @pendingLines) . "\n" . $sep; }
                $inRange = 0;
                @pendingLines = ();
                if ($maxRanges > 0 && $nFound >= $maxRanges) { last; }
            }
            else {
                push(@pendingLines, ($lineNumber ? "$lnum:":"") . $rec);
            }
        }
    } # EOF
    $inRange = 0;
    @pendingLines = ();
    #($path eq "-") || ($fh eq *STDIN) || ($fh eq *STDOUT) || $fh.close();
    return $nFound;
}

sub matches {
    my ($s, $regex) = @_;
    if ($ignoreCase) {
        if ($s =~ m/$regex/i) { return 1; }
        return 0;
    }
    else {
        if ($s =~ m/$regex/) { return 1; }
        return 0;
    }
}
