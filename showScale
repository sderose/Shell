#!/usr/bin/perl -w
#
# showScale: Display a line to help count character columns and widths.
#
# 2006-11-??: Written by Steven J. DeRose.
# 2008-01-17 sjd: Getopt.
# 2012-09-12: ?
# 2015-01-15: Add --startCount, --up, --width, --base.
# 2016-02-29: Fix doc.
# 2018-08-26: Add --separator.
# 2018-10-22: Add --zero. Fix 'colorstring' call.
#
use strict;
use Getopt::Long;

our $VERSION_DATE = "2018-08-26";

my $base       = 10;
my $color      = ($ENV{USE_COLOR} && -t STDERR) ? 1:0;
my $quiet      = 0;
my $separator  = 0;
my $startCount = 1;
my $up         = 0;
my $verbose    = 0;
my $width      = 0;
my $zero       = 0;

Getopt::Long::Configure ("ignore_case");
my $result = GetOptions(
    "base=o"            => \$base,
	"c|color!"          => \$color,
	"h|help|?"          => sub { system "perldoc $0"; exit; },
	"q|quiet!"          => \$quiet,
	"separator!"        => \$separator,
	"startCount=o"      => \$startCount,
	"up=o"              => \$up,
	"v|verbose+"        => \$verbose,
    "version"           => sub {
		die "Version of $VERSION_DATE, by Steven J. DeRose.\n";
	},
	"width=o"           => \$width,
	"zero!"             => \$zero,
	);

($result) || die "Bad options.\n";


###############################################################################
###############################################################################
# Main
#
if ($width == 0) { $width = $ENV{COLUMNS}; }
if (!$width) {
	if (!$quiet) {
	    warn "Can't get \$COLUMNS -- .profile could export it (cf --width).\n";
	}
    $width = 160;
}

if ($separator) {
    print(("#" x $width) . "\n");
    exit;
}

my $r=""; my $c="";
if ($color) {
   $r = `colorstring.pm red`;
   $c = `colorstring.pm cancel`;
}

my $scale = "";
if (0) {
    $scale = "----+----1----+----2----+----3----+----4----+----5"
        .       "----+----6----+----7----+----8----+----9----+----0";
    my $h = ($width/100) + 1;
    $scale = $scale x $h;
    $scale = substr($scale, 0, $width-1);
}
else {
    $scale = makeScale($startCount, $base, $width);
}

if ($zero) { $scale = "0" . substr($scale, 0, length($scale)-1); }

if ($up) {
    $scale = ("\x1B[A" x $up) . "\r" . $scale . ("\x1B[B" x $up);
}
print "$r$scale$c\n";

exit;


##############################################################################
#
sub makeScale {
    my ($start, $base, $width) = @_;

    my $halfBase = ($base % 2) ?  0:int($base/2); # Even bases only

    my $buf = "";
    for (my $i=0, my $n=$start; $i<$width; $i++, $n++) {
        if ($n % $base == 0) {
            my $label = sprintf("%d", int($n/$base));
            $buf .= substr($label, length($label)-1);
        }
        elsif ($halfBase && ($n % $halfBase == 0)) {
            $buf .= '+';
        }
        else {
            $buf .= '-';
        }
    }
    return($buf);
}


##############################################################################
##############################################################################
#

=pod

=head1 Usage

scale [options]

Displays a scale for counting columns in your *nix shell, such as:

----+----1----+----2----+----3----+----4----+----5

The numbers represent the second-smallest digit of the column number (in
decimal, the default, that's the "tens" digit). For even bases, a "+"
appears at the "halfway" points (multiples of 5, for decimal).

To start counting somewhere other than from 1, see I<--startCount>.

As long as environment variable '\$COLUMNS' has been set (for example, by
having C<export COLUMNS> in your F<.bashrc> or similar file),
the scale will be sized to fit your window.


=head1 Options

=over

=item * B<--base> I<n>

Label the scale in base I<n>.

=item * B<--color>

Use color.

=item * B<--startCount> I<n>

Number the first column as I<n> (default: 1).
I<n> may be specified in the usual bases.
This could be useful for showing offsets into 0-based strings,
absolute offsets for text extracted from known starting point(s) in a
file (say, with C<cut> or I<body>), etc.

=item * B<--up> I<n>

Display the scale I<n> lines above the current place,
for example, to put it closer to what you want to measure.
I<--up> uses ANSI terminal cursor-movement commands.

=item * B<--width> I<n>

Display I<n> columns of scale. Default: the value of the C<$COLUMNS>
environment variable, or 160 if not available.
I<n> may be specified in the usual bases.

=item * B<--zero>

Start the scale at offset 0 instead of 1.

=back


=head1 Known bugs and limitations

B<Note>: The bash shell does not automatically C<export COLUMNS>, so
for this script to know your terminal width,
your F<.bashrc> or similar file must do that explicitly.


=head1 Ownership

This work by Steven J. DeRose is licensed under a Creative Commons
Attribution-Share Alike 3.0 Unported License. For further information on
this license, see L<http://creativecommons.org/licenses/by-sa/3.0/>.

For the most recent version, see L<http://www.derose.net/steve/utilities/>.

=cut
