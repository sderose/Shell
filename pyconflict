#!/usr/bin/env python
#
# pyconflict
#
# 2014-09-03: Written by Steven J. DeRose.
#
# To do:
#
from __future__ import print_function
import sys
import os
import re
import argparse
import string
#import math
import subprocess
#import codecs, locale

from sjdUtils import sjdUtils
from alogging import ALogger

__version__ = "2014-09-03"


###############################################################################
# Process options
#
parser = argparse.ArgumentParser(
    description="""
=head1 Usage


=head1 Related Commands


=head1 Known bugs and limitations


=head1 Ownership

This work by Steven J. DeRose is licensed under a Creative Commons
Attribution-Share Alike 3.0 Unported License. For further information on
this license, see L<http://creativecommons.org/licenses/by-sa/3.0/>.

For the most recent version, see L<http://www.derose.net/steve/utilities/>.

=cut

    """,
    epilog="(see also 'perldoc "+sys.argv[0]+"')"
)
parser.add_argument(
    "--color",            action='store_true',
    help='Colorize the output.')
parser.add_argument(
    "--find",             type=str,
    help='Report installed versions of package(s) matching this name.')
parser.add_argument(
    "--nocolor",          action='store_false', dest="color",
    help='Turn off colorizing.')
parser.add_argument(
    "--ignoreCase", "-i", action='store_true',
    help='Disregard case distinctions.')
parser.add_argument(
    "--quiet", "-q",      action='store_true',
    help='Suppress most messages.')
parser.add_argument(
    "--verbose", "-v",    action='count',       default=0,
    help='Add more messages (repeatable).')
parser.add_argument(
    "--version",          action='version',     version='Version of '+__version__,
    help='Display version information, then exit.')

global args, su
#lg = ALogger()
args = parser.parse_args()
if (args.color is None):
    args.color = ("USE_COLOR" in os.environ and sys.stderr.isatty())
su = sjdUtils()
su.setColors(args.color)
su.setVerbose(args.verbose)


###############################################################################
###############################################################################
# Main
#

print("Searching for port, apt-get, pip conflicts (should add brew)...")

if (args.find):
    pass
else:
    allConflicts()

print("Done.")
exit()


###############################################################################
#
def allConflicts():
    # E.g.: Cython (0.20.1)
    #
    pip = subprocess.check_output([ "pip", "list", "installed" ])

    pips = pip.split("\n")
    pipIndex = {}
    for i in (range(0, len(pips))):
        mat = re.match(r'(.*)\s+\((.*)\)', pips[i])
        if (not mat):
            print("***** " + pips[i])
        else:
            pipIndex[mat.group(1)] = mat.group(2)
        #print(pips[i])

    print("\n"+ '#'*79 + '\n\n')

    # E.g.: py27-cython                    @0.20.2         python/py-cython
    #
    port = subprocess.check_output([ "port", "list", "installed" ])

    ports = port.split("\n")
    portIndex = {}
    for i in (range(0, len(ports))):
        mat = re.match(r'(.*)\s+@(\S*)\s+(.*)', ports[i])
        nm = mat.group(1)
        re.sub(r'^py(thon)?\d+-', '', nm)
        portIndex[nm] = mat.group(2)
        #print(ports[i])


    # apt-get
    # dpkg -l
    #

    both = set(pipIndex) & set(portIndex)

    print("Installed in both pip and port:\n")
    print(both)

